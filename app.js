// Generator Functions


// Function that returns a random index (number) of a string value tht is passed in as an argurment 
function randomIndex(str){
    return Math.floor(Math.random() * str.length);
} 
        // console.log(randomIndex(`example`));

// example:
//randomIndex(`abc`);
    //  (Math.random() * str.length); 
        // Will return random number within index length [0 - 1.99]
    //  Math.floor([random]);
        // Will drop decimal and round off number to its nearest interget in downward direction (randomIndex 0, 1 )



// Function that returns a random letter using a random index in the "letter" string variable
function randomLetter(){
    const letters = "abcdefghijklmnopqrstuvwxyz";
    return letters[randomIndex(letters)];  
    //randomIndex(letters);
        // passing in letters length (26) as string value in the randomIndex function code
    // letters[randomIndex(letters)]; 
        // will return corresponding letter of random index generated by randomIndex function
} 
        // console.log(randomLetter());



// Function that returns an uppercase random letter, using the randomLetter function that pulls from letter variable and converting it toUpperCase
function getRandomUpper(){
    const letter = randomLetter();
        //Running the "randomLetter" function to create a random (lowercase) letter and setting that value to the letter variable
    return letter.toUpperCase();
        // converting the returned (lowercase) letter (from randomLetter() function)  .toUpperCase Letter and returning it from the function
} 
        // console.log(getRandomUpper());



// function to get random lower case letter using randomLetter function 
function getRandomLower() {
    return randomLetter();
}
        // console.log(getRandomLower());



// Function to return a random number from numbers variable
function getRandomNumber(){
    const numbers = `1234567890`;
    return numbers[randomIndex(numbers)];
        // will return a randomIndex from 1-9 using a random index in the "numbers" string
}
        // console.log(getRandomNumber());



// Function to return a random symbol from the symbols variable
function getRandomSymbol(){
    const symbols = `'!@#$%^&*(){}[]=<>/,.'`
    return symbols[randomIndex(symbols)];
        // Returrning a random symbol using a random index in the "symbols" string
}
        // console.log(getRandomSymbol());




// FUNCTION OBJECT CREATED: randomFunct{} with 4 key: value pairs, to store all generator functions
const randomFunc = {
    upper: getRandomUpper,
    lower: getRandomLower,
    number: getRandomNumber,
    symbol: getRandomSymbol
  };


// SELECTING the DOM ELEMENTS to be manipulated using JavaScript:
const resultEl = document.querySelector(`#result`);
const lengthEl = document.querySelector(`#length`);
const uppercaseEl = document.querySelector(`#uppercase`);
const lowercaseEl = document.querySelector(`#lowercase`);
const numbersEl = document.querySelector(`#numbers`);
const symbolsEl = document.querySelector(`#symbols`);
const generateEl = document.querySelector(`#generate`);
const clipboardEl = document.querySelector(`#clipboard`);



// GENERATE PASSWORD FUNCTION!!!
    // Function that accepts true or false values as well as a number as arguments
function generatePassword(upper, lower, number, symbol, length){
            // function generatePassword taking on 5 different parameters
            // console.log(true, false, true, false, 10)

    // 1. Create the password variable 
        // 'let' variable set to empty string, so it can be updated later
        let generatedPassword = ``;

    // 2. Filter out unchecked types (.filter() method - where only arguments that pass the test will be applied (true arguments))
        // Types refer to upper/lower/numbers/symbols/length (aka function generatePassword parameters)
        // True and false values can be added together (true = 1 and false = 0)
        const typesCount = upper + lower + number + symbol;
            // typesCount = true/false checked checkboxes
                // if upper and numbers selected (upper = true, numbers = true), typesCount length will be 2
        console.log(typesCount);
        
        if (typesCount === 0){
            // IF statement to check to see if none of the password parameters are checked. If none are checked, will set to generate an empty string and/or message.
            // if returning a string message, it would need to fit inside the #results box.
            // can display an alert and return empty string in results box
            alert (`Please select at least one option`);
            return ""; 
        }

        let typesArr = [
            [`upper`, upper],
            // [string value of `upper`, parameter of upper] - do not need string value, but to help as a reminder for the what the original parameter was when run filter method
            [`lower`, lower],
            [`number`, number],
            [`symbol`, symbol]
        ];

        typesArr = typesArr.filter(item => {   
            console.log(item[1]);
            return item[1];     // 1st time through array item[index of 1]
                                // 2nd time thru will move to item[index of 2]
        });
        console.log(typesArr);
            // The filter method creates a new array with ONLY the elements that pass the test implemented by the provided function 
            // new array will contain test results values for each item within the original array
            // will run function for each item[] in array
            // provided function: anonymous arrow function with parameter of 'item'
                // first time thru for upper, if true value and will be added, if false will not be added
                // 2nd time through for lower, if true item will  be added, if false will not be added
                // 3rd time through for numbers if true and will be added, if false will not be added 
                // 4th time through for symbol if true will be added, if false and will not be added


    // 3. Loop over the length (length user provided) and call the generator function for each checked type
        // Building password with a 'for loop'
        for (i = 0; i < length; i += typesCount){
                // i = 0;
                // i < length; = whatever is passed in for the length value from <input type="number">
                // i + typesCount : each time through the loop, we will add filter result to typesCount array SAME AS i = i + typesCount
            typesArr.forEach(type => {
                const funcName = type[0];
                console.log(funcName);
                // forEach() method with anonymous arrow function with (type) as parameter 
                // taking in each item through the UPDATED/NEW typesArr 
                    // 1st time: type[0] = [`upper`, upper]
                    // 2nd time: type[1] = [`number`, number]
                    // for the <input type="number"> -- length
                generatedPassword += randomFunc[funcName]();
                    // SAME AS: generatedPassword = generatedPassword + randomFunc[funcName]();
                    // randomFunc = object with random functions created previously
                console.log(generatedPassword);
            })
             
        }

    // 4. Add the final password to the password variable and return it from the function
    const finalPassword = generatedPassword.slice(0, length);
        // Removing extra characters if necessay -- The above loop will create a password that may not match the length selected, if that length is not a multiple of the number of types selected
            // use 'slice' to slice string to determined length for password.
            // slice(first index, ending index)
                // at .slice(0, length), (if length is set at 5) index:0 will start at the begininng of generatedPassword string and will stop at 6th item(index 5/length set)
            // .slice does not return the ending character(will not return item at index 5 which would be 6th item bc password length is set at 5). 
        
    return finalPassword;
}   

//EVENT LISTENER for when the "Generate Password" button is clicked
generateEl.addEventListener(`click`, () => {
        // when clicked on 'generateEl' then the function will run
    const length = parseInt(lengthEl.value);
            // Accessing value for the lengthEl and changing value from a "string" to a number using parseInt() and setting to variable, const length
            
    const hasUpper = uppercaseEl.checked;    
    const hasLower = lowercaseEl.checked;
    const hasNumbers = numbersEl.checked;
    const hasSymbols = symbolsEl.checked;
            // Will return true (checked) or false (unchecked) for checkboxes and set to variable
    console.log(hasUpper, hasLower, hasNumbers, hasSymbols, length);

    resultEl.innerText = generatePassword(hasUpper, hasLower, hasNumbers, hasSymbols, length);
        // The generatePassword function takes the true/false values determined by the checked checkboxes as well as the number for the length (number input)  as arguments and returns a string(AKA generated password) which is set as the value for the innerText property for the resultEl/span.
});

// TO COPY GENERATED PASSWORD TO CLIPBOARD
    
clipboardEl.addEventListener(`click`, () => {
        // Adding event listener to clipboardEl, upon click (anonymous arrow function -- we aren't naming it because we arent using it again within document.)
    const textArea = document.createElement(`textarea`);
        // creating html element: textarea
    const password = resultEl.innerText;
        // give up the displayed password

    // If user clicks clipboard while no password is displayed the function will end and nothing will be copied to the clipboard. 
    if (password === ""){
        return;
        // will return as empty string (span started as empty string also)   
    }

    textArea.value = password;
        // setting 'password' as value for textArea
    const body = document.querySelector(`body`);
        // selecting body element
    body.append(textArea);
        // adding textArea to the webpage (happens to fast that wont even be able to see the textArea before it is removed)
    textArea.select();
        // selecting/highlighting the text in textArea
    document.execCommand(`copy`);
        // 'copy' highlighted text in textArea
    textArea.remove();
        // removing the textArea, it has been copied and do not need textArea
    alert(`Password has been copied to the clipboard!`);
        // alert that it has been copied to the clipboard!

});
        








// Generate Password RUN EXAMPLES

// generatePassword(true, false, true, false, 10);
            // will run getRandomUpper() & getRandomNumber() until 10 characters
            // and will keep adding each new character to the generatedPassword
        /*  length = 10
        typesArr = [
            [`upper`, upper],
            [`number`, number],
        ];
        
                                        upper: C
                                        number: C4                                          
                                        upper: C4F
                                        number: C4F8
                                        upper: C4F8G
                                        number: C4F8G7
                                        upper: C4F8G7Q
                                        number: C4F8G7Q6
                                        upper: C4F8G7Q6F
                                        number: C4F8G7Q6F5
                                              
        */
       

// generatePassword(true, false, false, false, 5);
                // will run getRandomUpper() x5
        /*  length = 5
        typesArr = [
            [`upper`, upper]
        ];
                                        upper: O
                                        upper: OD
                                        upper: ODL
                                        upper: ODLF
                                        upper: ODLFG

        */

//  generatePassword(true, true, true, true, 5);
                // will run getRandomUpper(), getRandomLower(), getRandomNumber(), getRandomSymbol(), and start over 
        /*  length = 5
        typesArr = [
            [`upper`, upper] - index0
            [`lower`, lower] - index1
            [`number`, number] - index2
            [`symbol`, symbol] - index 3
        ];
                                        upper: K
                                        lower: Kf
                                        number: Kf5
                                        symbol: Kf5'
                                        upper: Kf5'W
                                        lower: Kf5'Wh
                                        number: Kf5'Wh2
                                        symbol: Kf5'Wh2'
        */